/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Form;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import Communication.Communication;
import Domain.Student;
import Domain.Teacher;
import Domain.Trip;
import Domain.TripStudent;
import Domain.TripTeacher;

/**
 *
 * @author SoniXx
 */
public class FrmChangeTrip extends javax.swing.JFrame {

    FrmAddTripTeacher tripTeacherForm;
    FrmAddTripStudent tripStudentForm;
    List<Teacher> selectedTeachers;
    List<Student> selectedStudents;
    List<TripTeacher> deleteTripTeachers;
    List<TripStudent> deleteTripStudents;
    List<TripTeacher> addedTripTeachers;
    List<TripStudent> addedTripStudents;
    Trip tripToChange;
    long tripID;
    
    /**
     * Creates new form FrmAddTrip
     */
    public FrmChangeTrip() {
        initComponents();
        initializeForms();
        tripID = 0;
    }

    FrmChangeTrip(Trip selectedTrip, List<Student> selectedStudents, List<Teacher> selectedTeachers, List<Student> restStudents, List<Teacher> restTeachers) {
        initComponents();
        tripToChange = selectedTrip;
        this.selectedStudents = selectedStudents;
        this.selectedTeachers = selectedTeachers;
        initializeForms();
        fillForms();
        deleteTripTeachers = new ArrayList<>();
        deleteTripStudents = new ArrayList<>();
        addedTripTeachers = new ArrayList<>();
        addedTripStudents = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        destinationField = new javax.swing.JTextField();
        startDateField = new javax.swing.JTextField();
        endDateField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        teacherTable = new javax.swing.JTable();
        addTeacherButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        addStudentButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Destinacija:");

        jLabel2.setText("Datum pocetka:");

        jLabel3.setText("Datum kraja:");

        jLabel4.setText("Cena:");

        teacherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Ime", "Prezime"
            }
        ));
        jScrollPane1.setViewportView(teacherTable);

        addTeacherButton.setText("Izmeni Nastvnike");
        addTeacherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeacherButtonActionPerformed(evt);
            }
        });

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Ime", "Prezime", "Razred"
            }
        ));
        jScrollPane2.setViewportView(studentTable);

        addStudentButton.setText("Izmeni Ucenike");
        addStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Zapamti izlet");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Nazad");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(43, 43, 43))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(19, 19, 19)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4))
                                            .addGap(51, 51, 51)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(startDateField)
                                        .addComponent(destinationField)
                                        .addComponent(endDateField)
                                        .addComponent(priceField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(addTeacherButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(addStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(saveButton)
                        .addGap(54, 54, 54)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(destinationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(endDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addTeacherButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addStudentButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(jButton1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(validateData().isEmpty()){
            saveTripBase();
            saveTripTeachers();
            saveTripStudents();
            JOptionPane.showMessageDialog(this,"Podaci o izletu su sačuvani.");
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(this, validateData());
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addTeacherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeacherButtonActionPerformed
        tripTeacherForm.setVisible(true);
    }//GEN-LAST:event_addTeacherButtonActionPerformed

    private void addStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentButtonActionPerformed
        tripStudentForm.setVisible(true);
    }//GEN-LAST:event_addStudentButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmChangeTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmChangeTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmChangeTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmChangeTrip.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmChangeTrip().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStudentButton;
    private javax.swing.JButton addTeacherButton;
    private javax.swing.JTextField destinationField;
    private javax.swing.JTextField endDateField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField priceField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField startDateField;
    private javax.swing.JTable studentTable;
    private javax.swing.JTable teacherTable;
    // End of variables declaration//GEN-END:variables

    private void saveTripBase() {
        tripID = tripToChange.getId();
        tripToChange.setDestination(destinationField.getText());
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date startDate = null;
        Date endDate = null;
        try {
            startDate = dateFormat.parse(startDateField.getText());
            endDate = dateFormat.parse(endDateField.getText());
        } catch (ParseException ex) {
            Logger.getLogger(FrmChangeTrip.class.getName()).log(Level.SEVERE, null, ex);
        }
        Long price = Long.parseLong(priceField.getText());
        tripToChange.setStartDate(startDate);
        tripToChange.setEndDate(endDate);
        tripToChange.setPrice(price);
        try {
            Communication.getInstance().editTrip(tripToChange);
        } catch (Exception ex) {
            Logger.getLogger(FrmChangeTrip.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveTripTeachers() {
        List<TripTeacher> dummyTT = new ArrayList<>();
        dummyTT.addAll(deleteTripTeachers);
        for(TripTeacher tt:dummyTT){
            if(addedTripTeachers.remove(tt)){
                deleteTripTeachers.remove(tt);
            }else{
                try {
                    System.out.println("Deleting Teacher: " + tt.toString());
                    Communication.getInstance().deleteTripTeacher(tt);
                } catch (Exception ex) {
                    Logger.getLogger(FrmChangeTrip.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }  
        for(TripTeacher tt:addedTripTeachers){
            try {
                System.out.println("Adding Teacher: " + tt.toString());
                Communication.getInstance().addTripTeacher(tt);
            } catch (Exception ex) {
                Logger.getLogger(FrmChangeTrip.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void saveTripStudents() {
        List<TripStudent> dummyTS = new ArrayList<>();
        dummyTS.addAll(deleteTripStudents);
        for(TripStudent ts:dummyTS){
            if(addedTripStudents.remove(ts)){
                deleteTripStudents.remove(ts);
            }else{
                try {
                    System.out.println("Deleting Student: " + ts.toString());
                    Communication.getInstance().deleteTripStudent(ts);
                } catch (Exception ex) {
                    Logger.getLogger(FrmChangeTrip.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        for(TripStudent ts:addedTripStudents){
            try {
                System.out.println("Adding student: " + ts.toString());
                Communication.getInstance().addTripStudent(ts);
            } catch (Exception ex) {
                Logger.getLogger(FrmChangeTrip.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void initializeForms() {
        tripTeacherForm = new FrmAddTripTeacher(this, selectedTeachers);
        tripStudentForm = new FrmAddTripStudent(this, selectedStudents);
    }

    void saveTeachers(List<Teacher> teachers) {
        for(Teacher teacher:selectedTeachers){
            if(!teachers.contains(teacher)){
                deleteTripTeachers.add(new TripTeacher(tripToChange.getId(),teacher.getId()));
            }
        }
        for(Teacher teacher:teachers){
            if(selectedTeachers==null||selectedTeachers.isEmpty()||!selectedTeachers.contains(teacher)){
                addedTripTeachers.add(new TripTeacher(tripToChange.getId(),teacher.getId()));
            }
        }
        selectedTeachers = teachers;
        fillTeacherTable();
    }

    void saveStudents(List<Student> students) {
        for(Student student:selectedStudents){
            if(!students.contains(student)){
                deleteTripStudents.add(new TripStudent(tripToChange.getId(),student.getId()));
            }
        }
        for(Student student:students){
            if(selectedStudents==null||selectedStudents.isEmpty()||!selectedStudents.contains(student)){
                addedTripStudents.add(new TripStudent(tripToChange.getId(),student.getId()));
            }
        }
        selectedStudents = students;
        fillStudentTable();
    }

    private void fillForms() {
        destinationField.setText(tripToChange.getDestination());
        startDateField.setText(tripToChange.getStartDateString());
        endDateField.setText(tripToChange.getEndDateString());
        priceField.setText("" + tripToChange.getPrice());
        fillTeacherTable();
        fillStudentTable();
    }

    private void fillTeacherTable() {
        DefaultTableModel dtm = (DefaultTableModel) teacherTable.getModel();
        while(dtm.getRowCount()>0){
            dtm.removeRow(0);
        }
        for(Teacher teacher:selectedTeachers){
            dtm.addRow(new Object[]{teacher.getId(),teacher.getFirstName(),teacher.getLastName()});
        }
    }
    
    private void fillStudentTable() {
        DefaultTableModel dtm = (DefaultTableModel) studentTable.getModel();
        while(dtm.getRowCount()>0){
            dtm.removeRow(0);
        }
        for(Student student:selectedStudents){
            dtm.addRow(new Object[]{student.getId(),student.getFirstName(),student.getLastName(),student.getGrade()});
        }
    }

    private String validateData() {
        String destination = destinationField.getText();
        String startDateTxt = startDateField.getText();
        String endDateTxt = endDateField.getText();
        String priceTxt = priceField.getText();
        
        String errorMessage = "";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date;
        //Metoda ispod omogucava striktnije formatiranje datuma.
        dateFormat.setLenient(false);
        
        if(destination.isEmpty()){
            errorMessage += "Polje destinacije izleta ne sme biti prazno!\n";
        }
        if(startDateTxt.isEmpty()){
            errorMessage += "Polje početka izleta ne sme biti prazno!\n";
        }
        try{
            date = dateFormat.parse(startDateTxt);
        } catch(ParseException ex){
            errorMessage += "Početak izleta nije ispravno upisan! Format datuma je 21-12-2012.\n";
        }
        try{
            date = dateFormat.parse(endDateTxt);
        } catch(ParseException ex){
            errorMessage += "Kraj izleta nije ispravno upisan! Format datuma je 21-12-2012.\n";
        }
        if(endDateTxt.isEmpty()){
            errorMessage += "Polje kraja izleta ne sme biti prazno!\n";
        }
        if(priceTxt.isEmpty()){
            errorMessage += "Polje cene izleta ne sme biti prazno!\n";
        }
        double price = Double.parseDouble(priceTxt);
        if(price<0){
            errorMessage += "Cena ne može biti negativan broj\n";
        }
        
        
        return errorMessage;
    }
    
}
